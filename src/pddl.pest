/// DOMAIN

domain = {
    "(" ~ "define" ~ domain_name
    ~ require_def?
    ~ types_def?
    ~ constants_def?
    ~ predicates_def
    ~ functions_def?
    // ~ constraints_def?
    ~ structure_def*
    ~ ")"
}

domain_name = { "(" ~ "domain" ~ name ~ ")" }

// DOMAIN - Require

require_def = { "(" ~ ":requirements" ~ REQUIRE_KEY+ ~ ")" }

// DOMAIN - Types

types_def = { "(" ~ ":types" ~ typed_name_list ~ ")" }

typed_name_list = { (single_type_name_list+ ~ name* | name*) }

single_type_name_list = { ( name+ ~ "-" ~ prim_type ) }

r_type = { ( "(" ~ "either" ~ prim_type+ ~ ")" ) | prim_type }

prim_type = { name }

// DOMAIN - Constants

constants_def = { "(" ~ ":constants" ~ typed_name_list ~ ")" }

// DOMAIN - Predicates

predicates_def = { "(" ~ ":predicates" ~ atomic_formula_skeleton+ ~ ")" }

atomic_formula_skeleton = { "(" ~ predicate ~ typed_variable_list ~ ")" }

predicate = { name }

// DOMAIN - Functions

functions_def = { "(" ~ ":functions" ~ function_list ~ ")" }

function_list = { (atomic_function_skeleton+ ~ ("-" ~ function_type)? )* }

atomic_function_skeleton = { "(" ~ function_symbol ~ typed_variable_list ~ ")" }

function_symbol = { name }

function_type = { "number" } // Currently in PDDL only numeric functions are allowed

// DOMAIN - Helpers

typed_variable_list = { ( (single_type_var_list+ ~ VARIABLE*) | VARIABLE* ) }

single_type_var_list = { ( VARIABLE+ ~ "-" ~ r_type ) }

// DOMAIN - Constraints

// constraints_def = { "(" ~ ":constraints" ~ goal_description ~ ")" }

// DOMAIN - Structure

structure_def = { 
    action_def
    // | durative_action_def
    // | derived_def
}

// DOMAIN - Action

action_def = { "(" ~ ":action" ~ action_symbol 
    ~ ":parameters" ~ "(" ~ typed_variable_list ~ ")"
    ~ action_def_body 
    ~ ")"
}

action_symbol = { name }

action_def_body = { 
    ( ":precondition" ~ (("(" ~ ")") | precondition) )?
    ~ ( ":effect" ~ (("(" ~ ")") | effect) )?
}

precondition = { goal_description }

goal_description = {
    atomic_term_formula
    | "(" ~ "and" ~ goal_description* ~ ")"
    | "(" ~ "or" ~ goal_description* ~ ")"
    | "(" ~ "not" ~ goal_description ~ ")"
    | "(" ~ "imply" ~ goal_description ~ goal_description ~ ")"
    | "(" ~ "forall" ~ "(" ~ typed_variable_list ~ ")" ~ goal_description ~ ")"
    | "(" ~ "exists" ~ "(" ~ typed_variable_list ~ ")" ~ goal_description ~ ")"
    | fcomp
}

fcomp = { "(" ~ binary_comp ~ fexp ~ fexp ~ ")" }

atomic_term_formula = { "(" ~ predicate ~ term* ~ ")" }

term = { name | VARIABLE }

// Expressions

fexp = {
    NUMBER
    | "(" ~ binary_op ~ fexp ~ fexp ~ ")"
    | "(" ~ "-" ~ fexp ~ ")"
    | fhead
}

fhead = { 
    ("(" ~ function_symbol ~ term* ~ ")") 
    | function_symbol
}

effect = { 
     "(" ~ "and" ~ c_effect* ~ ")"
    | c_effect
}

c_effect = {
    "(" ~ "forall" ~ "(" ~ typed_variable_list ~ ")" ~ effect ~ ")"
    | "(" ~ "when" ~ goal_description ~ cond_effect ~ ")"
    | p_effect
}

p_effect = {
    "(" ~ assign_op ~ fhead ~ fexp ~ ")"
    | "(" ~ "not" ~ atomic_term_formula ~ ")"
    | atomic_term_formula
}

cond_effect = { ("(" ~ "and" ~ p_effect* ~ ")") | p_effect }


/// PDDL Lexer

REQUIRE_KEY = {
    ":strips"
    | ":typing"
    | ":negative-preconditions"
    | ":disjunctive-preconditions"
    | ":equality"
    | ":existential-preconditions"
    | ":universal-preconditions"
    | ":quantified-preconditions"
    | ":conditional-effects"
    | ":fluents"
    | ":adl"
    | ":durative-actions"
    | ":derived-predicates"
    | ":timed-initial-literals"
    | ":preferences"
    | ":constraints"
}

name = { NAME | "at" | "over" }

NAME = { LETTER ~ ANY_CHAR* }

LETTER = { 'a'..'z' | 'A'..'Z' }

ANY_CHAR = { LETTER | DIGIT | "_" | "-" }

VARIABLE = { "?" ~ LETTER ~ ANY_CHAR* }

NUMBER = { DIGIT+ ~ ("." ~ DIGIT+)? }

DIGIT = { '0'..'9' }

NL = { "\r" | "\n" }

LINE_COMMENT = _{ ";" ~ (!NL ~ ANY_CHAR)* ~ NL }

WHITESPACE = _{ (" " | "\t" | NL)+ }

binary_op = { "*" | "/" | "+" | "-" }

binary_comp = { "=" | "<" | ">" | "<=" | ">=" }

assign_op = { "assign" | "scale-up" | "scale-down" | "increase" | "decrease" }